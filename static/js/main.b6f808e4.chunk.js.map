{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","search","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","theRobot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOA+BeA,EAfF,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GAI3B,OACC,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAI,YAAYC,IAAG,+BAA0BH,EAA1B,4BACxB,gCACC,6BAAKF,IACL,4BAAIC,WCDOK,EApBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAElB,OACC,8BAEEA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,cAAC,EAAD,CAECR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKGC,EAdG,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAEnB,OACC,qBAAKT,UAAU,MAAf,SACC,uBACCA,UAAU,iCACVU,KAAK,SACLC,YAAY,gBACZC,SAAWH,OCAAI,EARA,SAACC,GACf,OACC,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,oBAAoBC,OAAQ,SAAvE,SACEJ,EAAMK,YCkBKC,E,kDArBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHM,E,qDAOlB,SAAmBC,EAAOC,GACzBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG3B,WACC,OAAGG,KAAKJ,MAAMC,SAEZ,2DAGKG,KAAKX,MAAMK,a,GAlBOQ,aCwDZC,G,wDAjDd,aAAc,IAAD,8BACZ,gBAeDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAfzC,EAAKZ,MAAQ,CACZjB,OAAQ,GACR2B,YAAY,IAJD,E,qDAQb,WAAoB,IAAD,OAElBG,MAAM,gDACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAACtB,OAAQkC,S,oBAavC,WAAU,IAAD,EACwBb,KAAKJ,MAA7BjB,EADA,EACAA,OAAQ2B,EADR,EACQA,YAEVQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACrC,OAAOA,EAAS5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAGxD,OAAStC,EAAOwC,OAGd,sBAAK5C,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,OAAQgB,KAAKI,iBACxB,cAAC,EAAD,UACC,cAAC,EAAD,UACC,cAAC,EAAD,CAAUzB,OAAQmC,WAPtB,iE,GAlCeZ,cCIHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,SAKlDX,M","file":"static/js/main.b6f808e4.chunk.js","sourcesContent":["import React from 'react';\n\n// vvvvvvv  before adding Props vvvvvvvvvvvvv\n// const Card = ()=>{\n// \treturn (\n// \t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n// \t\t\t<img alt='robot pic' src='https://robohash.org/xx?200x200' />\n// \t\t\t<div>\n// \t\t\t\t<h2>Guy Dude</h2>\n// \t\t\t\t<p>dudemail@email.com</p>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }\n\n// vvvvvvvvv after adding Props vvvvvvvvvvvvv\nconst Card = ({ name, email,id })=>{\n\t// const {name ,email,id } = props; \n\t\t// reason for above is we destructured the object properties assigned for each item. If not, you need to type: 'props.name' or 'props.email' for every property that has a value being switched in from the props object.\n\t\t// But, we destructured the argument directly and bypassed this step...\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robot pic' src={`https://robohash.org/${id}/set_set3?size=200x200`} /> \n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","// CardList.js import React from 'react'; import Card from './Card';\nimport React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{ \n\t\n\treturn ( \n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user,i) =>{\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\t\temail={robots[i].email} \n\t\t\t\t\t\t/> \n\t\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;\n\n// -------  second, this happened...  --------------- \n\t// created an array and mapped out individual Card components. Then, that array is now the return of the function\n// const CardList = ({robots}) =>{ \n\t// const cardArray = robots.map((user,i) =>{\n\t\t// \treturn \t(\n\t\t// \t\t<Card \n\t\t// \t\t\tkey={i} \n\t\t// \t\t\tid={robots[i].id} \n\t\t// \t\t\tname={robots[i].name} \n\t\t// \t\t\temail={robots[i].email} \n\t\t// \t\t/> \n\t\t// \t)\n\t\t// });\n\n\t// return (\n\t\t// <div>\n\t\t\t// {cardArray};\n\t\t// </div>\n\t// );\n// }\n\n\n// -------  first this happened...  ---------------\n\t// put all individual Card components in.\n\t// The props sent over from index.js file is the 'robots' object...\t\n// const CardList = ({robots}) =>{ \n\t// return(\n\t\t// <div> \n\t\t\t// <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} /> \n\t\t\t// <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} /> \n\t\t\t// <Card id={robots[2].id} name={robots[1].name} email={robots[2].email} /> \n\t\t\t// <Card id={robots[3].id} name={robots[2].name} email={robots[3].email} /> \n\t\t// </div>\n\t// );\n// }","// SearchBox.js\nimport React from 'react';\n\nconst SearchBox = ({search}) =>{\n\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba b--green bg-lights-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots' \n\t\t\t\tonChange= {search}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default SearchBox;","// Scroll.js\nimport React from 'react';\n\nconst Scroll = (props) => {\n\treturn(\n\t\t<div style={{ overflowY: 'scroll', border: '3px solid #ffa500',height: '600px' }} >\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch( error, info ){\n\t\tthis.setState({ hasError: true})\n\t}\n\n\trender() {\n\t\tif(this.state.hasError){\n\t\t\treturn (\n\t\t\t\t<h1>Uh oh! Something is awry!</h1>\n\t\t\t)\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundry;","// App.js\nimport React,{ Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css'; \n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield:''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\t// console.log('checkkkkk !!');\n\t\tfetch('\thttps://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response =>response.json())\n\t\t\t.then(users =>this.setState({robots: users}));\n\t\t\t// .then(users =>this.setState({}));\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield: event.target.value});\n\n\t\t// const filteredRobots = this.state.robots.filter(theRobot => {\n\t\t// \treturn theRobot.name.toLowerCase().includes(this.state.searchfield.toLowerCase() )\n\t\t// \t})\n\t\t// console.log(filteredRobots);\n\t}\n\n\trender() {\n\t\tconst { robots, searchfield } = this.state;\n\n\t\tconst filteredRobots = robots.filter(theRobot => {\n\t\treturn theRobot.name.toLowerCase().includes(searchfield.toLowerCase() )\n\t\t})\n\n\t\treturn (!robots.length) ?\n\t\t\t<h1> The Robots are loading... </h1> :\n\t\t\t(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t\t\t<SearchBox search={this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t\n\t}\n}\n\nexport default App;\n\n\n/// -------- with STATE set up and App as a class ----------\n// const state = {  \n// \trobots: robots,\n// \tsearchfield = ''\n// }\n// ^^ this got eliminated and put inside class declaration\n\n\n//<CardList robots={this.state.robots} />\n\n// ---------- pre-STATE set up -----------------\n// const App = () =>{\n// \treturn (\n// \t\t<div className='tc'>\n// \t\t\t<h1>RoboFriends</h1>\n// \t\t\t<SearchBox />\n// \t\t\t<CardList robots={robots} />\n// \t\t</div>\n// \t);\n// }\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(<App />,  document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}